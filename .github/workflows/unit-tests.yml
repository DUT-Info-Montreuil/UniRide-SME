#This workflow will run unit tests on the codebase and check for any errors and warnings.

name: Run Unit Tests for Uniride SME Backend (Python)

on:
  pull_request:
    branches:
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    env: # We need to set the environment variables for the tests to run
          # We can use the secrets we have stored in the repository, with secrets.<SECRET_NAME>
          ACCEPT_TIME_DIFFERENCE_MINUTES: ${{ secrets.ACCEPT_TIME_DIFFERENCE_MINUTES }}
          BASE_RATE: ${{ secrets.BASE_RATE }}
          CACHE_REDIS_DB: ${{ secrets.CACHE_REDIS_DB }}
          CACHE_REDIS_HOST: ${{ secrets.CACHE_REDIS_HOST }}
          CACHE_REDIS_PORT: ${{ secrets.CACHE_REDIS_PORT}}
          CACHE_TYPE: ${{ secrets.CACHE_TYPE}}
          COST_PER_KM: ${{ secrets.COST_PER_KM}}
          FRONT_END_URL: ${{ secrets.FRONT_END_URL }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          MAIL_EXPIRATION: ${{ secrets.MAIL_EXPIRATION }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAX_CONTENT_LENGTH: ${{ secrets.MAX_CONTENT_LENGTH }}
          RATE_PER_KM: ${{ secrets.RATE_PER_KM }}
          ROUTE_CHECKER: ${{ secrets.ROUTE_CHECKER }}
          RQ_REDIS_URL: ${{ secrets.RQ_REDIS_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
          UNIVERSITY_CITY: ${{ secrets.UNIVERSITY_CITY }}
          UNIVERSITY_EMAIL_DOMAIN: ${{ secrets.UNIVERSITY_EMAIL_DOMAIN }}
          UNIVERSITY_POSTAL_CODE: ${{ secrets.UNIVERSITY_POSTAL_CODE }}
          UNIVERSITY_STREET_NAME: ${{ secrets.UNIVERSITY_STREET_NAME }}
          UNIVERSITY_STREET_NUMBER: ${{ secrets.UNIVERSITY_STREET_NUMBER }}
          JWT_ACCESS_TOKEN_REFRESH: ${{ secrets.JWT_ACCESS_TOKEN_REFRESH }}
          PFP_UPLOAD_FOLDER: ${{ secrets.PFP_UPLOAD_FOLDER }}
          LICENSE_UPLOAD_FOLDER: ${{ secrets.LICENSE_UPLOAD_FOLDER }}
          ID_CARD_UPLOAD_FOLDER: ${{ secrets.ID_CARD_UPLOAD_FOLDER }}
          SCHOOL_CERTIFICATE_UPLOAD_FOLDER: ${{ secrets.SCHOOL_CERTIFICATE_UPLOAD_FOLDER }}
          INSURANCE_UPLOAD_FOLDER: ${{ secrets.INSURANCE_UPLOAD_FOLDER }}
          FLASK_DEBUG: ${{ secrets.FLASK_DEBUG }}
          FLASK_HOST: ${{ secrets.FLASK_HOST }}
          FLASK_PORT: ${{ secrets.FLASK_PORT }}
          CERTIFICATE_CRT_FOLDER: ${{ secrets.CERTIFICATE_CRT_FOLDER }}
          CERTIFICATE_KEY_FOLDER: ${{ secrets.CERTIFICATE_KEY_FOLDER }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3 #v3 is the latest version of checkout

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        python -m pip install .[dev]
        if [ -f pyproject.toml ]; then pip install .; fi

    - name: Update Flake8
      run: python -m pip install --upgrade flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Analysing the code with pylint
      run: |
        pylint uniride_sme  --fail-under=${{ secrets.PYLINT_FAIL_UNDER }}